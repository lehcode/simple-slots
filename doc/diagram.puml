@startuml SlotGame

package "Components" {
    class AppComponent {
        +ngOnInit()
    }

    class GameContainerComponent {
        -gameState$: Observable<GameState>
        +ngOnInit()
        +startGame()
        +stopGame()
    }

    class SettingsFormComponent {
        -settingsForm: FormGroup
        -destroy$: Subject<void>
        +ngOnInit()
        +ngOnDestroy()
        -createForm()
        -isFieldInvalid(fieldName: string): boolean
    }

    class GameBoardComponent {
        -playerPosition$: Observable<number>
        -objects$: Observable<FallingObject[]>
        +ngOnInit()
        +ngOnDestroy()
    }

    class ScoreDisplayComponent {
        -score$: Observable<number>
        -timeRemaining$: Observable<number>
        +ngOnInit()
    }
}

package "Services" {
    class GameStateService {
        -settings: BehaviorSubject<GameSettings>
        -gameState: BehaviorSubject<GameState>
        -gameOver: Subject<void>
        +settings$: Observable<GameSettings>
        +gameState$: Observable<GameState>
        +gameOver$: Observable<void>
        +updateSettings(settings: GameSettings)
        +startGame()
        +stopGame()
        +restartGame()
        -updateGameState()
        -spawnObject()
        -detectCollisions()
    }

    class PseudoWebSocketService {
        -connection$: BehaviorSubject<boolean>
        -gameUpdates$: Subject<IGameUpdate>
        +connect()
        +disconnect()
        +sendUpdate(update: IGameUpdate)
        -simulateLatency()
    }

    class SettingsValidatorService {
        +validatePositiveNumber()
        +validateRange()
        +validateInteger()
    }
}

package "Interfaces" {
    interface GameSettings {
        +fallingSpeed: number
        +fallingFrequency: number
        +playerSpeed: number
        +gameTime: number
    }

    interface GameState {
        +isPlaying: boolean
        +score: number
        +timeRemaining: number
        +playerPosition: number
        +objects: FallingObject[]
    }

    interface FallingObject {
        +id: number
        +x: number
        +y: number
    }
}

' Module
class AppModule {
    +declarations: Components[]
    +imports: Modules[]
    +providers: Services[]
    +bootstrap: [AppComponent]
}

' Relationships
AppModule --> AppComponent
AppComponent --> GameContainerComponent
GameContainerComponent --> SettingsFormComponent
GameContainerComponent --> GameBoardComponent
GameContainerComponent --> ScoreDisplayComponent

GameStateService ..> GameState: uses
GameStateService ..> GameSettings: uses
GameState ..> FallingObject: contains

SettingsFormComponent --> GameStateService: uses
SettingsFormComponent --> SettingsValidatorService: uses
GameBoardComponent --> GameStateService: uses
ScoreDisplayComponent --> GameStateService: uses
GameContainerComponent --> GameStateService: uses
GameStateService --> PseudoWebSocketService: uses

@enduml